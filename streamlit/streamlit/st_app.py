import streamlit as st
import pandas as pd
from validate_df import validate_csv
import io
import toml
from eda import plot_length, length, plot_top_words, plot_wordcloud
import logging
from logging.handlers import RotatingFileHandler
import sys
import os



st.set_page_config(
    page_title="RAG",
    page_icon="üí¨",
    layout="centered",
    initial_sidebar_state="expanded",
)

# primary_color = theme_settings.get("primary_color", "#8FAFBE")
# st.markdown(
#     f"""
#     <style>
#     .stApp {{
#         font-family: sans-serif;
#         background-color: {primary_color};
#         color: white;
#     }}
#     </style>
#     """,
#     unsafe_allow_html=True,
# )

file_handler = RotatingFileHandler(
    'logs/app.log',           # –ò–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞
    maxBytes=1024*1024,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    backupCount=5         # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ backup-—Ñ–∞–π–ª–æ–≤
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)
logger = logging.getLogger()
logger.setLevel(logging.INFO)
logger.addHandler(file_handler)


def main():

    # –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ RAG")
    st.markdown("""
    ### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
    """)

    st.sidebar.title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

    st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    st.markdown("""
       **–§–æ—Ä–º–∞—Ç –¥–∞—Ç–∞—Å–µ—Ç–∞** - 3 –∫–æ–ª–æ–Ω–∫–∏ —Å —Ç–µ–∫—Å—Ç–∞–º–∏  
       `–∫–æ–Ω—Ç–µ–∫—Å—Ç(context)`, `–≤–æ–ø—Ä–æ—Å(question)`, `–æ—Ç–≤–µ—Ç(answer)`
        """)
    st.markdown("—Å—Å—ã–ª–∫–∞ –Ω–∞ [–ø—Ä–∏–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞](https://huggingface.co/datasets/neural-bridge/rag-dataset-12000)")
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ 200 –ú–±", type="csv")

    if uploaded_file is not None:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        valid_df = validate_csv(uploaded_file)
        # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        if valid_df is not None:
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω!")
            data = valid_df
            logging.info("—Ñ–∞–π–ª –¥–∞—Ç–∞—Å–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω")
            st.write("–ü—Ä–µ–≤—å—é - –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:")
            st.dataframe(data.head(5))

        if valid_df is not None:
            if st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö"):
                st.write(f"–í—Å–µ–≥–æ {len(data)} —Å—Ç—Ä–æ–∫")
                st.write(f"–í—Å–µ–≥–æ {len(data.columns)} —Å—Ç–æ–ª–±—Ü–∞")


            if st.sidebar.checkbox("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã"):
                columns = data.columns
                if data.duplicated().values.any():
                    st.write("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã")
                elif data.duplicated(subset=columns[0]).values.any():
                    st.write(f"–í –¥–∞—Ç–∞—Å–µ—Ç–µ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∫–æ–ª–æ–Ω–∫–µ {columns[0]}")
                elif data.duplicated(subset=columns[1]).values.any():
                    st.write(f"–í –¥–∞—Ç–∞—Å–µ—Ç–µ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∫–æ–ª–æ–Ω–∫–µ {columns[1]}")
                elif data.duplicated(subset=columns[2]).values.any():
                    st.write(f"–í –¥–∞—Ç–∞—Å–µ—Ç–µ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∫–æ–ª–æ–Ω–∫–µ –≤ –∫–æ–ª–æ–Ω–∫–µ {columns[2]}")
                else:
                    st.write("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")

            if st.sidebar.checkbox("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö"):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                if data.isnull().values.any():
                    st.write("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –µ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    missing_rows = data[data.isnull().any(axis=1)].index.tolist()
                    miss = data[data.isnull().any(axis=1)]
                    # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    st.write("–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:")
                    for row in missing_rows:
                        st.write(f"–°—Ç—Ä–æ–∫–∞ {row}")
                    if st.sidebar.button("—Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏"):
                        if missing_rows:
                            st.write("–°—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:")
                            st.write(miss)
                        else:
                            st.write("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.")
                else:
                    st.write("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.")

            st.sidebar.title("–ì—Ä–∞—Ñ–∏–∫–∏")

            if uploaded_file is not None:
                if st.sidebar.checkbox("–î–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤"):
                    new_data = length(data)
                    col_len = new_data.columns[-3:].to_list()
                    fig, ax = plot_length(new_data, col_len)
                    logging.info("–≥—Ä–∞—Ñ–∏–∫ —Å –¥–ª–∏–Ω–∞–º–∏ —Å–ª–æ–≤ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    st.pyplot(fig)
            if uploaded_file is not None:
                if st.sidebar.checkbox("–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å —Å–ª–æ–≤"):
                    cols = data.columns
                    fig, ax = plot_top_words(data[cols[0]])
                    logging.info("–≥—Ä–∞—Ñ–∏–∫ —Å —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å—é —Å–ª–æ–≤ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    st.pyplot(fig)
                    # plot_top_words(df['context'], 'context')

            if uploaded_file is not None:
                if st.sidebar.checkbox("–û–±–ª–∞–∫–æ —Å–ª–æ–≤"):
                    cols = data.columns
                    fig, ax = plot_wordcloud(data[cols[0]])
                    logging.info("–æ–±–ª–∞–∫–æ —Å–ª–æ–≤ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    st.pyplot(fig)

            st.sidebar.title("–ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥")

            st.sidebar.title("–û–±—É—á–µ–Ω–∏–µ")

            st.sidebar.title("–ò–Ω—Ñ–µ—Ä–µ–Ω—Å")



if __name__ == "__main__":
    main()