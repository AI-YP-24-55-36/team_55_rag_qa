import datetime
import logging
import sys
import time
from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np

from log_output import Tee
from load_config import load_config

config = load_config()
BASE_DIR = Path(config["paths"]["base_dir"])
LOGS_DIR = BASE_DIR / config["paths"]["logs_dir"]
GRAPHS_DIR = BASE_DIR / config["paths"]["graphs_dir"]
OUTPUT_DIR = BASE_DIR / config["paths"]["output_dir"]


timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
sys.stdout = Tee(f"{OUTPUT_DIR}/log_{timestamp}.txt")

logger = logging.getLogger('bench')
logger.setLevel(logging.INFO)
logger.propagate = False

file_handler = logging.FileHandler(f'{LOGS_DIR}/bench.log')
file_handler.setLevel(logging.INFO)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(file_handler)


def visualize_results(speed_results, accuracy_results, bm25_results=None, title_prefix="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞",
                      save_dir=f"{GRAPHS_DIR}"):
    print(f"\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    Path(save_dir).mkdir(exist_ok=True, parents=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    has_dense_models = bool(speed_results) and bool(accuracy_results)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è BM25
    has_bm25 = bm25_results is not None

    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –≤—ã—Ö–æ–¥–∏–º
    if not has_dense_models and not has_bm25:
        logger.warning("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        print("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö BM25
    bm25_has_algos = False
    if has_bm25:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É BM25 —Ä–∞–∑–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
        if isinstance(bm25_results["speed"], dict) and any(isinstance(v, dict) for v in bm25_results["speed"].values()):
            bm25_has_algos = True

    # 1. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
    plt.figure(figsize=(12, 7))

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    if has_dense_models:
        models = list(speed_results.keys())
        algorithms = list(speed_results[models[0]].keys())
    else:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ BM25, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π
        models = []
        # –î–ª—è BM25 –±–µ—Ä–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏–∑ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if bm25_has_algos:
            algorithms = list(bm25_results["speed"].keys())
        else:
            # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
            algorithms = ["BM25"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –∏ —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    n_groups = len(algorithms)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    n_models = len(models)
    if has_bm25 and bm25_has_algos:
        n_models += 1

    bar_width = 0.8 / n_models if n_models > 0 else 0.8

    index = np.arange(n_groups)
    colors = plt.cm.tab10(np.linspace(0, 1, n_models))

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if has_dense_models:
        for i, (model, color) in enumerate(zip(models, colors)):
            values = [speed_results[model][algo]["avg_time"] *
                      1000 for algo in algorithms]  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

            plt.bar(
                index + i * bar_width,
                values,
                bar_width,
                label=model,
                color=color,
                edgecolor='black',
                linewidth=0.5
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            for j, v in enumerate(values):
                plt.text(
                    index[j] + i * bar_width,
                    v + 0.1,
                    f"{v:.1f}",
                    ha='center',
                    va='bottom',
                    fontsize=8,
                    rotation=45
                )

    # –î–æ–±–∞–≤–ª—è–µ–º BM25, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if has_bm25:
        i = len(models)  # –ò–Ω–¥–µ–∫—Å –¥–ª—è BM25

        if bm25_has_algos:
            # –ï—Å–ª–∏ —É BM25 –µ—Å—Ç—å —Ä–∞–∑–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            values = [bm25_results["speed"][algo]["avg_time"] * 1000 for algo in algorithms]

            plt.bar(
                index + i * bar_width,
                values,
                bar_width,
                label="BM25",
                color=colors[i],
                edgecolor='black',
                linewidth=0.5,
                hatch='//'  # –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∏—Ö–æ–≤–∫—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            for j, v in enumerate(values):
                plt.text(
                    index[j] + i * bar_width,
                    v + 0.1,
                    f"{v:.1f}",
                    ha='center',
                    va='bottom',
                    fontsize=8,
                    rotation=45
                )
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
            bm25_value = bm25_results["speed"]["avg_time"] * 1000

            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
            bm25_values = [bm25_value] * len(algorithms)

            plt.bar(
                index + i * bar_width,
                bm25_values,
                bar_width,
                label="BM25",
                color=colors[i],
                edgecolor='black',
                linewidth=0.5,
                hatch='//'  # –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∏—Ö–æ–≤–∫—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            for j, v in enumerate(bm25_values):
                plt.text(
                    index[j] + i * bar_width,
                    v + 0.1,
                    f"{v:.1f}",
                    ha='center',
                    va='bottom',
                    fontsize=8,
                    rotation=45
                )

    plt.xlabel('–ê–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–∏—Å–∫–∞')
    plt.ylabel('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ (–º—Å)')
    plt.title(f"{title_prefix}: –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞")
    plt.xticks(index + bar_width * (n_models - 1) / 2, algorithms)
    plt.legend(loc='upper left', bbox_to_anchor=(1, 1))
    plt.tight_layout()
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    timestr = time.strftime("%Y%m%d-%H%M%S")
    speed_save_path = f"{save_dir}/speed_comparison_{timestr}.png"
    plt.savefig(speed_save_path, dpi=300, bbox_inches='tight')
    logger.info(f"–ì—Ä–∞—Ñ–∏–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {speed_save_path}")

    plt.figure(figsize=(12, 7))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è top_k
    all_top_k = set()

    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ã—á–Ω—ã–µ –º–æ–¥–µ–ª–∏, —Å–æ–±–∏—Ä–∞–µ–º –∏—Ö top_k –∑–Ω–∞—á–µ–Ω–∏—è
    if has_dense_models:
        models = list(accuracy_results.keys())
        algorithms = list(accuracy_results[models[0]].keys())

        for model in models:
            for algo in algorithms:
                all_top_k.update(accuracy_results[model][algo].keys())
    else:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ BM25, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π
        models = []
        # –î–ª—è BM25 –±–µ—Ä–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏–∑ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if bm25_has_algos:
            algorithms = list(bm25_results["accuracy"].keys())
        else:
            algorithms = []

    # –ï—Å–ª–∏ –µ—Å—Ç—å BM25, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ top_k –∑–Ω–∞—á–µ–Ω–∏—è
    if has_bm25:
        if bm25_has_algos:
            # –ï—Å–ª–∏ —É BM25 –µ—Å—Ç—å —Ä–∞–∑–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
            for algo in bm25_results["accuracy"].keys():
                all_top_k.update(bm25_results["accuracy"][algo].keys())
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            all_top_k.update(bm25_results["accuracy"].keys())

    top_k_values = sorted(list(all_top_k))

    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π top_k, –≤—ã—Ö–æ–¥–∏–º
    if not top_k_values:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏")
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –∏ —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    n_groups = len(top_k_values)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
    if has_dense_models:
        n_bars = len(models) * len(algorithms)
    else:
        n_bars = 0

    if has_bm25:
        if bm25_has_algos:
            n_bars += len(bm25_results["accuracy"].keys())
        else:
            n_bars += 1

    # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–æ–≤, –≤—ã—Ö–æ–¥–∏–º
    if n_bars == 0:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏")
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏")
        return

    bar_width = 0.8 / n_bars

    index = np.arange(n_groups)
    colors = plt.cm.tab10(np.linspace(0, 1, n_bars))

    i = 0
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if has_dense_models:
        for model in models:
            for algo in algorithms:
                values = []
                for k in top_k_values:
                    if k in accuracy_results[model][algo]:
                        values.append(
                            accuracy_results[model][algo][k]["accuracy"])
                    else:
                        values.append(0)  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ top_k

                plt.bar(
                    index + i * bar_width,
                    values,
                    bar_width,
                    label=f"{model} - {algo}",
                    color=colors[i],
                    edgecolor='black',
                    linewidth=0.5
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
                for j, v in enumerate(values):
                    if v > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        plt.text(
                            index[j] + i * bar_width,
                            v + 0.01,
                            f"{v:.3f}",
                            ha='center',
                            va='bottom',
                            fontsize=8,
                            rotation=45
                        )

                i += 1

    # –î–æ–±–∞–≤–ª—è–µ–º BM25, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if has_bm25:
        if bm25_has_algos:
            # –ï—Å–ª–∏ —É BM25 –µ—Å—Ç—å —Ä–∞–∑–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
            for algo in bm25_results["accuracy"].keys():
                values = []
                for k in top_k_values:
                    if k in bm25_results["accuracy"][algo]:
                        values.append(
                            bm25_results["accuracy"][algo][k]["accuracy"])
                    else:
                        values.append(0)  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ top_k

                plt.bar(
                    index + i * bar_width,
                    values,
                    bar_width,
                    label=f"BM25 - {algo}",
                    color=colors[i],
                    edgecolor='black',
                    linewidth=0.5,
                    hatch='//'  # –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∏—Ö–æ–≤–∫—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
                for j, v in enumerate(values):
                    if v > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        plt.text(
                            index[j] + i * bar_width,
                            v + 0.01,
                            f"{v:.3f}",
                            ha='center',
                            va='bottom',
                            fontsize=8,
                            rotation=45
                        )

                i += 1
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            values = []
            for k in top_k_values:
                if k in bm25_results["accuracy"]:
                    values.append(bm25_results["accuracy"][k]["accuracy"])
                else:
                    values.append(0)  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ top_k

            plt.bar(
                index + i * bar_width,
                values,
                bar_width,
                label="BM25",
                color=colors[i],
                edgecolor='black',
                linewidth=0.5,
                hatch='//'  # –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∏—Ö–æ–≤–∫—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            for j, v in enumerate(values):
                if v > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    plt.text(
                        index[j] + i * bar_width,
                        v + 0.01,
                        f"{v:.3f}",
                        ha='center',
                        va='bottom',
                        fontsize=8,
                        rotation=45
                    )

    plt.xlabel('Top-K')
    plt.ylabel('–¢–æ—á–Ω–æ—Å—Ç—å')
    plt.title(f"{title_prefix}: –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞")
    plt.xticks(index + bar_width * (n_bars - 1) / 2, top_k_values)
    plt.legend(loc='upper left', bbox_to_anchor=(1, 1))
    plt.tight_layout()
    plt.grid(axis='y', linestyle='--', alpha=0.7)

    accuracy_save_path = f"{save_dir}/accuracy_comparison_{timestr}.png"
    plt.savefig(accuracy_save_path, dpi=300, bbox_inches='tight')
    logger.info(f"–ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {accuracy_save_path}")

    print(f"‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {save_dir}")
