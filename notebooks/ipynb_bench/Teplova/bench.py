import logging
from pathlib import Path
import matplotlib.pyplot as plt
import numpy as np
import time
import sys
import datetime
from tqdm import tqdm
from qdrant_client import models
from log_output import Tee
from load_config import load_config

config = load_config()
BASE_DIR = Path(config["paths"]["base_dir"])
LOGS_DIR = BASE_DIR / config["paths"]["logs_dir"]
GRAPHS_DIR = BASE_DIR / config["paths"]["graphs_dir"]
OUTPUT_DIR = BASE_DIR / config["paths"]["output_dir"]


timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
sys.stdout = Tee(f"{OUTPUT_DIR}/log_{timestamp}.txt")

logger = logging.getLogger('bench')
logger.setLevel(logging.INFO)
logger.propagate = False

file_handler = logging.FileHandler(f'{LOGS_DIR}/bench.log')
file_handler.setLevel(logging.INFO)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(file_handler)

def benchmark_tfidf(client, collection_name, test_data, model, search_params=None, top_k_values=[1, 3]):
    print(
        f"\nüîç –ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ TF-IDF –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}'")
    logger.info(
        f"–ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ TF-IDF –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}'")

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = {
        "speed": {
            "avg_time": 0,
            "median_time": 0,
            "max_time": 0,
            "min_time": 0,
            "query_times": []
        },
        "accuracy": {k: {"correct": 0, "total": 0, "accuracy": 0} for k in top_k_values}
    }

    # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ top_k –¥–ª—è –ø–æ–∏—Å–∫–∞
    max_top_k = max(top_k_values)

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    total_queries = len(test_data)
    logger.info(
        f"–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ TF-IDF –¥–ª—è {total_queries} –∑–∞–ø—Ä–æ—Å–æ–≤")
    print(f"‚è±Ô∏è  –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ TF-IDF...")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar = tqdm(total=total_queries,
                        desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ TF-IDF", unit="–∑–∞–ø—Ä–æ—Å")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –≤–µ–∫—Ç–æ—Ä—ã –∑–∞—Ä–∞–Ω–µ–µ
    query_texts = test_data['question'].tolist()
    query_vectors = model.transform(query_texts)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–¥–µ–ª—å–Ω–æ
    for idx, row in test_data.iterrows():
        query_text = row['question']
        true_context = row['context']

        # –ü–æ–ª—É—á–∞–µ–º –≤–µ–∫—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
        query_vector = query_vectors[idx]
        query_indices = query_vector.indices.tolist()
        query_values = query_vector.data.tolist()

        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
        start_time = time.time()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        search_results = client.query_points(
            collection_name=collection_name,
            query=models.SparseVector(
                indices=query_indices,
                values=query_values,
            ),
            using="text",
            limit=max_top_k,
            search_params=search_params
        )

        end_time = time.time()
        query_time = end_time - start_time
        results["speed"]["query_times"].append(query_time)

        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π top_k
        found_contexts = [point.payload.get(
            'context', '') for point in search_results.points]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è top_k
        for k in top_k_values:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            results["accuracy"][k]["total"] += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ø–µ—Ä–≤—ã—Ö k —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            if true_context in found_contexts[:k]:
                results["accuracy"][k]["correct"] += 1
                logger.info(
                    f"TF-IDF –ó–∞–ø—Ä–æ—Å {idx}: '{query_text[:50]}...' - –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω –≤ top-{k} ‚úì")
            else:
                logger.info(
                    f"TF-IDF –ó–∞–ø—Ä–æ—Å {idx}: '{query_text[:50]}...' - –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ top-{k} ‚úó")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar.update(1)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar.close()

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏
    query_times = results["speed"]["query_times"]
    if query_times:
        results["speed"]["avg_time"] = sum(query_times) / len(query_times)
        results["speed"]["median_time"] = sorted(
            query_times)[len(query_times) // 2]
        results["speed"]["max_time"] = max(query_times)
        results["speed"]["min_time"] = min(query_times)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    del results["speed"]["query_times"]

    # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è top_k
    for k in top_k_values:
        correct = results["accuracy"][k]["correct"]
        total = results["accuracy"][k]["total"]
        accuracy = correct / total if total > 0 else 0
        results["accuracy"][k]["accuracy"] = accuracy

        logger.info(
            f"TF-IDF –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ (top-{k}): {accuracy:.4f} ({correct}/{total})")

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏
    logger.info(
        f"TF-IDF –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {results['speed']['avg_time'] * 1000:.2f} –º—Å")
    logger.info(
        f"TF-IDF –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {results['speed']['median_time'] * 1000:.2f} –º—Å")
    logger.info(
        f"TF-IDF –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {results['speed']['max_time'] * 1000:.2f} –º—Å")
    logger.info(
        f"TF-IDF –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {results['speed']['min_time'] * 1000:.2f} –º—Å")

    print(
        f"‚úÖ –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ TF-IDF –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}'")

    return results


def benchmark_performance(client, collection_name, test_data, model, search_params=None, top_k_values=[1, 3]):
    print(
        f"\nüîç –ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}'")
    logger.info(
        f"–ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}'")

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = {
        "speed": {
            "avg_time": 0,
            "median_time": 0,
            "max_time": 0,
            "min_time": 0,
            "query_times": []
        },
        "accuracy": {k: {"correct": 0, "total": 0, "accuracy": 0} for k in top_k_values}
    }

    # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ top_k –¥–ª—è –ø–æ–∏—Å–∫–∞
    max_top_k = max(top_k_values)

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    total_queries = len(test_data)
    logger.info(f"–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è {total_queries} –∑–∞–ø—Ä–æ—Å–æ–≤")
    print(f"‚è±Ô∏è  –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞...")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar = tqdm(total=total_queries,
                        desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤", unit="–∑–∞–ø—Ä–æ—Å")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–¥–µ–ª—å–Ω–æ
    for idx, row in test_data.iterrows():
        query_text = row['question']
        true_context = row['context']

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        query_vector = model.encode(query_text, show_progress_bar=False)

        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
        start_time = time.time()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        search_results = client.query_points(
            collection_name=collection_name,
            query=query_vector.tolist(),
            using="context",
            search_params=search_params,
            limit=max_top_k  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ top_k
        )

        end_time = time.time()
        query_time = end_time - start_time
        results["speed"]["query_times"].append(query_time)

        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π top_k
        found_contexts = [point.payload.get(
            'context', '') for point in search_results.points]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è top_k
        for k in top_k_values:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            results["accuracy"][k]["total"] += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ø–µ—Ä–≤—ã—Ö k —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            if true_context in found_contexts[:k]:
                results["accuracy"][k]["correct"] += 1
                logger.info(
                    f"–ó–∞–ø—Ä–æ—Å {idx}: '{query_text[:50]}...' - –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω –≤ top-{k} ‚úì")
            else:
                logger.info(
                    f"–ó–∞–ø—Ä–æ—Å {idx}: '{query_text[:50]}...' - –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ top-{k} ‚úó")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar.update(1)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar.close()

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏
    query_times = results["speed"]["query_times"]
    if query_times:
        results["speed"]["avg_time"] = sum(query_times) / len(query_times)
        results["speed"]["median_time"] = sorted(
            query_times)[len(query_times) // 2]
        results["speed"]["max_time"] = max(query_times)
        results["speed"]["min_time"] = min(query_times)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    del results["speed"]["query_times"]

    # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è top_k
    for k in top_k_values:
        correct = results["accuracy"][k]["correct"]
        total = results["accuracy"][k]["total"]
        accuracy = correct / total if total > 0 else 0
        results["accuracy"][k]["accuracy"] = accuracy

        logger.info(
            f"–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ (top-{k}): {accuracy:.4f} ({correct}/{total})")

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏
    logger.info(
        f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {results['speed']['avg_time'] * 1000:.2f} –º—Å")
    logger.info(
        f"–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {results['speed']['median_time'] * 1000:.2f} –º—Å")
    logger.info(
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {results['speed']['max_time'] * 1000:.2f} –º—Å")
    logger.info(
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {results['speed']['min_time'] * 1000:.2f} –º—Å")

    print(
        f"‚úÖ –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}'")

    return results


def visualize_results(speed_results, accuracy_results, tfidf_results=None, title_prefix="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞", save_dir=f"{GRAPHS_DIR}/graphs"):
    print(f"\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    Path(save_dir).mkdir(exist_ok=True, parents=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    has_dense_models = bool(speed_results) and bool(accuracy_results)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è TF-IDF
    has_tfidf = tfidf_results is not None

    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –≤—ã—Ö–æ–¥–∏–º
    if not has_dense_models and not has_tfidf:
        logger.warning("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        print("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö TF-IDF
    tfidf_has_algos = False
    if has_tfidf:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É TF-IDF —Ä–∞–∑–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
        if isinstance(tfidf_results["speed"], dict) and any(isinstance(v, dict) for v in tfidf_results["speed"].values()):
            tfidf_has_algos = True

    # 1. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
    plt.figure(figsize=(12, 7))

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    if has_dense_models:
        models = list(speed_results.keys())
        algorithms = list(speed_results[models[0]].keys())
    else:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ TF-IDF, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π
        models = []
        # –î–ª—è TF-IDF –±–µ—Ä–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏–∑ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if tfidf_has_algos:
            algorithms = list(tfidf_results["speed"].keys())
        else:
            # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
            algorithms = ["TF-IDF"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –∏ —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    n_groups = len(algorithms)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    n_models = len(models)
    if has_tfidf and tfidf_has_algos:
        n_models += 1

    bar_width = 0.8 / n_models if n_models > 0 else 0.8

    index = np.arange(n_groups)
    colors = plt.cm.tab10(np.linspace(0, 1, n_models))

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if has_dense_models:
        for i, (model, color) in enumerate(zip(models, colors)):
            values = [speed_results[model][algo]["avg_time"] *
                      1000 for algo in algorithms]  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

            plt.bar(
                index + i * bar_width,
                values,
                bar_width,
                label=model,
                color=color,
                edgecolor='black',
                linewidth=0.5
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            for j, v in enumerate(values):
                plt.text(
                    index[j] + i * bar_width,
                    v + 0.1,
                    f"{v:.1f}",
                    ha='center',
                    va='bottom',
                    fontsize=8,
                    rotation=45
                )

    # –î–æ–±–∞–≤–ª—è–µ–º TF-IDF, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if has_tfidf:
        i = len(models)  # –ò–Ω–¥–µ–∫—Å –¥–ª—è TF-IDF

        if tfidf_has_algos:
            # –ï—Å–ª–∏ —É TF-IDF –µ—Å—Ç—å —Ä–∞–∑–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            values = [tfidf_results["speed"][algo]
                      ["avg_time"] * 1000 for algo in algorithms]

            plt.bar(
                index + i * bar_width,
                values,
                bar_width,
                label="TF-IDF",
                color=colors[i],
                edgecolor='black',
                linewidth=0.5,
                hatch='//'  # –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∏—Ö–æ–≤–∫—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            for j, v in enumerate(values):
                plt.text(
                    index[j] + i * bar_width,
                    v + 0.1,
                    f"{v:.1f}",
                    ha='center',
                    va='bottom',
                    fontsize=8,
                    rotation=45
                )
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
            tfidf_value = tfidf_results["speed"]["avg_time"] * 1000

            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
            tfidf_values = [tfidf_value] * len(algorithms)

            plt.bar(
                index + i * bar_width,
                tfidf_values,
                bar_width,
                label="TF-IDF",
                color=colors[i],
                edgecolor='black',
                linewidth=0.5,
                hatch='//'  # –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∏—Ö–æ–≤–∫—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            for j, v in enumerate(tfidf_values):
                plt.text(
                    index[j] + i * bar_width,
                    v + 0.1,
                    f"{v:.1f}",
                    ha='center',
                    va='bottom',
                    fontsize=8,
                    rotation=45
                )

    plt.xlabel('–ê–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–∏—Å–∫–∞')
    plt.ylabel('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ (–º—Å)')
    plt.title(f"{title_prefix}: –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞")
    plt.xticks(index + bar_width * (n_models - 1) / 2, algorithms)
    plt.legend(loc='upper left', bbox_to_anchor=(1, 1))
    plt.tight_layout()
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    timestr = time.strftime("%Y%m%d-%H%M%S")
    speed_save_path = f"{save_dir}/speed_comparison_{timestr}.png"
    plt.savefig(speed_save_path, dpi=300, bbox_inches='tight')
    logger.info(f"–ì—Ä–∞—Ñ–∏–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {speed_save_path}")

    plt.figure(figsize=(12, 7))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è top_k
    all_top_k = set()

    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ã—á–Ω—ã–µ –º–æ–¥–µ–ª–∏, —Å–æ–±–∏—Ä–∞–µ–º –∏—Ö top_k –∑–Ω–∞—á–µ–Ω–∏—è
    if has_dense_models:
        models = list(accuracy_results.keys())
        algorithms = list(accuracy_results[models[0]].keys())

        for model in models:
            for algo in algorithms:
                all_top_k.update(accuracy_results[model][algo].keys())
    else:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ TF-IDF, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π
        models = []
        # –î–ª—è TF-IDF –±–µ—Ä–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏–∑ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if tfidf_has_algos:
            algorithms = list(tfidf_results["accuracy"].keys())
        else:
            algorithms = []

    # –ï—Å–ª–∏ –µ—Å—Ç—å TF-IDF, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ top_k –∑–Ω–∞—á–µ–Ω–∏—è
    if has_tfidf:
        if tfidf_has_algos:
            # –ï—Å–ª–∏ —É TF-IDF –µ—Å—Ç—å —Ä–∞–∑–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
            for algo in tfidf_results["accuracy"].keys():
                all_top_k.update(tfidf_results["accuracy"][algo].keys())
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            all_top_k.update(tfidf_results["accuracy"].keys())

    top_k_values = sorted(list(all_top_k))

    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π top_k, –≤—ã—Ö–æ–¥–∏–º
    if not top_k_values:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏")
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –∏ —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    n_groups = len(top_k_values)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
    if has_dense_models:
        n_bars = len(models) * len(algorithms)
    else:
        n_bars = 0

    if has_tfidf:
        if tfidf_has_algos:
            n_bars += len(tfidf_results["accuracy"].keys())
        else:
            n_bars += 1

    # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–æ–≤, –≤—ã—Ö–æ–¥–∏–º
    if n_bars == 0:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏")
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏")
        return

    bar_width = 0.8 / n_bars

    index = np.arange(n_groups)
    colors = plt.cm.tab10(np.linspace(0, 1, n_bars))

    i = 0
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if has_dense_models:
        for model in models:
            for algo in algorithms:
                values = []
                for k in top_k_values:
                    if k in accuracy_results[model][algo]:
                        values.append(
                            accuracy_results[model][algo][k]["accuracy"])
                    else:
                        values.append(0)  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ top_k

                plt.bar(
                    index + i * bar_width,
                    values,
                    bar_width,
                    label=f"{model} - {algo}",
                    color=colors[i],
                    edgecolor='black',
                    linewidth=0.5
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
                for j, v in enumerate(values):
                    if v > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        plt.text(
                            index[j] + i * bar_width,
                            v + 0.01,
                            f"{v:.3f}",
                            ha='center',
                            va='bottom',
                            fontsize=8,
                            rotation=45
                        )

                i += 1

    # –î–æ–±–∞–≤–ª—è–µ–º TF-IDF, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if has_tfidf:
        if tfidf_has_algos:
            # –ï—Å–ª–∏ —É TF-IDF –µ—Å—Ç—å —Ä–∞–∑–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
            for algo in tfidf_results["accuracy"].keys():
                values = []
                for k in top_k_values:
                    if k in tfidf_results["accuracy"][algo]:
                        values.append(
                            tfidf_results["accuracy"][algo][k]["accuracy"])
                    else:
                        values.append(0)  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ top_k

                plt.bar(
                    index + i * bar_width,
                    values,
                    bar_width,
                    label=f"TF-IDF - {algo}",
                    color=colors[i],
                    edgecolor='black',
                    linewidth=0.5,
                    hatch='//'  # –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∏—Ö–æ–≤–∫—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
                for j, v in enumerate(values):
                    if v > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        plt.text(
                            index[j] + i * bar_width,
                            v + 0.01,
                            f"{v:.3f}",
                            ha='center',
                            va='bottom',
                            fontsize=8,
                            rotation=45
                        )

                i += 1
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            values = []
            for k in top_k_values:
                if k in tfidf_results["accuracy"]:
                    values.append(tfidf_results["accuracy"][k]["accuracy"])
                else:
                    values.append(0)  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ top_k

            plt.bar(
                index + i * bar_width,
                values,
                bar_width,
                label="TF-IDF",
                color=colors[i],
                edgecolor='black',
                linewidth=0.5,
                hatch='//'  # –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∏—Ö–æ–≤–∫—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            for j, v in enumerate(values):
                if v > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    plt.text(
                        index[j] + i * bar_width,
                        v + 0.01,
                        f"{v:.3f}",
                        ha='center',
                        va='bottom',
                        fontsize=8,
                        rotation=45
                    )

    plt.xlabel('Top-K')
    plt.ylabel('–¢–æ—á–Ω–æ—Å—Ç—å')
    plt.title(f"{title_prefix}: –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞")
    plt.xticks(index + bar_width * (n_bars - 1) / 2, top_k_values)
    plt.legend(loc='upper left', bbox_to_anchor=(1, 1))
    plt.tight_layout()
    plt.grid(axis='y', linestyle='--', alpha=0.7)

    accuracy_save_path = f"{save_dir}/accuracy_comparison_{timestr}.png"
    plt.savefig(accuracy_save_path, dpi=300, bbox_inches='tight')
    logger.info(f"–ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {accuracy_save_path}")

    print(f"‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {save_dir}")
