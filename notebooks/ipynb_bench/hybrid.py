import time
import numpy as np
from tqdm import tqdm
import logging
from qdrant_client import QdrantClient, models
from qdrant_client.models import MultiVectorComparator, Distance, SparseVector, QueryVector

logger = logging.getLogger(__name__)

def benchmark_hybrid_rerank(
    client: QdrantClient,
    collection_name: str,
    test_data,
    search_params=None,
    top_k_values=[1, 3, 5],
    bm25_weight=0.3,
    dense_weight=0.4,
    colbert_weight=0.3,
    reranker=None  # –§—É–Ω–∫—Ü–∏—è —Ä–µ—Ä–µ–π–∫–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, RankGPT, Cohere Rerank –∏ —Ç. –¥.)
):
    """–ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Hybrid Search + Rerank –≤ Qdrant"""

    print(f"\nüîç –ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ì–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ü–æ–∏—Å–∫–∞ + –†–µ—Ä–∞–Ω–∫–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}'")
    logger.info(f"–ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ì–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ü–æ–∏—Å–∫–∞ + –†–µ—Ä–∞–Ω–∫–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}'")

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = {
        "speed": {
            "avg_time": 0,
            "median_time": 0,
            "max_time": 0,
            "min_time": 0,
            "query_times": []
        },
        "accuracy": {
            "before_rerank": {k: {"correct": 0, "total": 0, "accuracy": 0} for k in top_k_values},
            "after_rerank": {k: {"correct": 0, "total": 0, "accuracy": 0} for k in top_k_values}
        }
    }

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π top_k –¥–ª—è –ø–æ–∏—Å–∫–∞
    max_top_k = max(top_k_values)

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    total_queries = len(test_data)
    logger.info(f"–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Hybrid Search –¥–ª—è {total_queries} –∑–∞–ø—Ä–æ—Å–æ–≤")
    print(f"‚è±Ô∏è  –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar = tqdm(total=total_queries, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤", unit="–∑–∞–ø—Ä–æ—Å")

    bm25_embedding_model = SparseTextEmbedding("Qdrant/bm25")
    dense_embedding_model = DenseTextEmbedding("sentence-transformers/all-MiniLM-L6-v2")
    colbert_embedding_model = LateInteractionEmbedding("colbertv2.0")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
    for idx, row in test_data.iterrows():
        query_text = row['question']
        true_context = row['context']

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        bm25_vector = list(bm25_embedding_model.query_embed(query_text))[0]
        dense_vector = dense_embedding_model.encode(query_text)
        colbert_vector = colbert_embedding_model.encode(query_text)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è Qdrant
        query_indices = bm25_vector.indices.tolist()
        query_values = bm25_vector.values.tolist()

        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
        start_time = time.time()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
        search_results = client.query_points(
            collection_name=collection_name,
            query={
                "bm25": QueryVector(
                    vector=SparseVector(indices=query_indices, values=query_values),
                    weight=bm25_weight
                ),
                "all-MiniLM-L6-v2": QueryVector(vector=dense_vector, weight=dense_weight),
                "colbertv2.0": QueryVector(vector=colbert_vector, weight=colbert_weight)
            },
            limit=max_top_k,
            search_params=search_params
        )

        end_time = time.time()
        query_time = end_time - start_time
        results["speed"]["query_times"].append(query_time)

        # –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –¥–æ —Ä–µ—Ä–µ–π–∫–∏–Ω–≥–∞
        found_contexts = [point.payload.get('context', '') for point in search_results.points]

        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ —Ä–µ—Ä–µ–π–∫–∏–Ω–≥–∞
        for k in top_k_values:
            results["accuracy"]["before_rerank"][k]["total"] += 1
            if true_context in found_contexts[:k]:
                results["accuracy"]["before_rerank"][k]["correct"] += 1

        # –†–µ—Ä–µ–π–∫–∏–Ω–≥ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if reranker:
            found_contexts = reranker(query_text, found_contexts)

        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ —Ä–µ—Ä–µ–π–∫–∏–Ω–≥–∞
        for k in top_k_values:
            results["accuracy"]["after_rerank"][k]["total"] += 1
            if true_context in found_contexts[:k]:
                results["accuracy"]["after_rerank"][k]["correct"] += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar.update(1)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar.close()

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏
    query_times = results["speed"]["query_times"]
    if query_times:
        results["speed"]["avg_time"] = sum(query_times) / len(query_times)
        results["speed"]["median_time"] = sorted(query_times)[len(query_times) // 2]
        results["speed"]["max_time"] = max(query_times)
        results["speed"]["min_time"] = min(query_times)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    del results["speed"]["query_times"]

    # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ –∏ –ø–æ—Å–ª–µ —Ä–µ—Ä–µ–π–∫–∏–Ω–≥–∞
    for stage in ["before_rerank", "after_rerank"]:
        for k in top_k_values:
            correct = results["accuracy"][stage][k]["correct"]
            total = results["accuracy"][stage][k]["total"]
            accuracy = correct / total if total > 0 else 0
            results["accuracy"][stage][k]["accuracy"] = accuracy
            logger.info(f"Hybrid Search {stage.replace('_', ' ')} (top-{k}): {accuracy:.4f} ({correct}/{total})")

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏
    logger.info(f"Hybrid Search –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {results['speed']['avg_time'] * 1000:.2f} –º—Å")
    logger.info(f"Hybrid Search –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {results['speed']['median_time'] * 1000:.2f} –º—Å")
    logger.info(f"Hybrid Search –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {results['speed']['max_time'] * 1000:.2f} –º—Å")
    logger.info(f"Hybrid Search –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {results['speed']['min_time'] * 1000:.2f} –º—Å")

    print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Hybrid Search –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}'")

    return results