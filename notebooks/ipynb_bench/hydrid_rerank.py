import logging
import time
from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np
import torch
from fastembed import SparseTextEmbedding
from qdrant_client import QdrantClient, models
from qdrant_client.models import (
    Distance,
    Modifier,
    MultiVectorConfig,
    SparseIndexParams,
    SparseVectorParams,
    VectorParams,
)
from sentence_transformers import CrossEncoder, SentenceTransformer
from tqdm import tqdm
from transformers import AutoModel, AutoTokenizer

from client import parse_args
from load_config import load_config
from read_data_from_csv import read_data

config = load_config()
BASE_DIR = Path(config["paths"]["base_dir"])
LOGS_DIR = BASE_DIR / config["paths"]["logs_dir"]
GRAPHS_DIR = BASE_DIR / config["paths"]["graphs_dir"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger('client')
logger.setLevel(logging.INFO)
logger.propagate = False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –ª–æ–≥–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –ª–æ–≥–≥–µ—Ä–∞–º

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler(f'{LOGS_DIR}/client.log')
file_handler.setLevel(logging.INFO)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(file_handler)

def upload_hybrid_data(client, collection_name: str, data):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Qdrant —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (BM25 + Dense + ColBERT)"""

    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ {len(data)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é {collection_name} —Å –≥–∏–±—Ä–∏–¥–Ω—ã–º –ø–æ–∏—Å–∫–æ–º")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è
    collections = client.get_collections().collections
    collection_names = [collection.name for collection in collections]

    if len(collections):
        for el in collection_names:
            client.delete_collection(el)
            print(f"Collection {el} has been cleared")

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å –≥–∏–±—Ä–∏–¥–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
    client.create_collection(
        collection_name=collection_name,
        vectors_config={
            "dense": VectorParams(
                size=384,  # –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å MiniLM
                distance=Distance.COSINE
            ),
            "colbertv2.0": VectorParams(
                size=128,  # –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å ColBERT
                distance=Distance.COSINE,
                multivector_config=MultiVectorConfig(comparator="max_sim")
            ),
        },
        sparse_vectors_config={
            "bm25": SparseVectorParams(
                index=SparseIndexParams(on_disk=False),
                modifier=Modifier.IDF
            )
        }
    )

    logger.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} —Å–æ–∑–¥–∞–Ω–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
    print(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} —Å–æ–∑–¥–∞–Ω–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    bm25_embedding_model = SparseTextEmbedding("Qdrant/bm25")
    dense_embedding_model = SentenceTransformer('all-MiniLM-L6-v2')
    colbert_embedding_model = AutoModel.from_pretrained("colbert-ir/colbertv2.0")
    colbert_tokenizer = AutoTokenizer.from_pretrained("colbert-ir/colbertv2.0")

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–æ–¥–µ–ª—å –≤ —Ä–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏ –∏ –Ω–∞ CPU
    colbert_embedding_model.eval()
    colbert_embedding_model = colbert_embedding_model.to('cpu')

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    points = []

    try:
        for item in tqdm(data):
            text = item["context"]

            try:
                # BM25 –≤–µ–∫—Ç–æ—Ä
                sparse_vector = list(bm25_embedding_model.query_embed(text))
                sparse_embedding = sparse_vector[0] if sparse_vector else None

                # Dense –≤–µ–∫—Ç–æ—Ä (MiniLM)
                dense_embedding = dense_embedding_model.encode(text)
                dense_embedding = dense_embedding.tolist()

                # ColBERT –≤–µ–∫—Ç–æ—Ä
                inputs = colbert_tokenizer(
                    text,
                    return_tensors="pt",
                    padding=True,
                    truncation=True,
                    max_length=512  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                )

                with torch.no_grad():
                    outputs = colbert_embedding_model(**inputs)
                    # –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ –ø–æ —Ç–æ–∫–µ–Ω–∞–º –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
                    colbert_embedding = outputs.last_hidden_state.mean(dim=1).squeeze(0)
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
                    if len(colbert_embedding.shape) > 1:
                        colbert_embedding = colbert_embedding.mean(dim=0)
                    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if colbert_embedding.shape[0] != 128:
                        colbert_embedding = torch.nn.functional.interpolate(
                            colbert_embedding.unsqueeze(0).unsqueeze(0),
                            size=128,
                            mode='linear'
                        ).squeeze()

                    colbert_embedding = colbert_embedding.cpu().numpy().tolist()

                # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –¥–∞–Ω–Ω—ã—Ö
                point = models.PointStruct(
                    id=item["id"],
                    payload=item,
                    vector={
                        "bm25": {
                            "values": sparse_embedding.values.tolist() if sparse_embedding else [],
                            "indices": sparse_embedding.indices.tolist() if sparse_embedding else []
                        },
                        "dense": dense_embedding,
                        "colbertv2.0": colbert_embedding
                    }
                )
                points.append(point)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {item['id']}: {str(e)}")
                continue

        print(f"–°–æ–∑–¥–∞–Ω–æ {len(points)} points")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Qdrant –±–∞—Ç—á–∞–º–∏
        batch_size = 100
        for i in range(0, len(points), batch_size):
            batch = points[i:i + batch_size]
            client.upload_points(
                collection_name=collection_name,
                points=batch
            )
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {i + len(batch)} –∏–∑ {len(points)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é {collection_name}")
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é {collection_name}")

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        raise


def benchmark_hybrid_rerank(client, collection_name, test_data, model, search_params=None, top_k_values=[1, 3],
                            bm25_weight=0.3,
                            dense_weight=0.4,
                            colbert_weight=0.3,
                            reranker = None
                            ):
    """–ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Hybrid Search + Rerank –≤ Qdrant —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º prefetch"""

    print(f"\nüîç –ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ì–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ü–æ–∏—Å–∫–∞ + –†–µ—Ä–∞–Ω–∫–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}'")
    logger.info(f"–ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ì–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ü–æ–∏—Å–∫–∞ + –†–µ—Ä–∞–Ω–∫–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}'")

    results = {
        "speed": {
            "avg_time": 0,
            "median_time": 0,
            "max_time": 0,
            "min_time": 0,
            "query_times": []
        },
        "accuracy": {
            "before_rerank": {k: {"correct": 0, "total": 0, "accuracy": 0} for k in top_k_values},
            "after_rerank": {k: {"correct": 0, "total": 0, "accuracy": 0} for k in top_k_values}
        }
    }

    max_top_k = max(top_k_values)
    total_queries = len(test_data)

    logger.info(f"–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Hybrid Search –¥–ª—è {total_queries} –∑–∞–ø—Ä–æ—Å–æ–≤")
    print(f"‚è±Ô∏è  –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")

    progress_bar = tqdm(total=total_queries, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤", unit="–∑–∞–ø—Ä–æ—Å")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    bm25_embedding_model = SparseTextEmbedding("Qdrant/bm25")
    dense_embedding_model = SentenceTransformer('all-MiniLM-L6-v2')
    colbert_embedding_model = AutoModel.from_pretrained("colbert-ir/colbertv2.0")
    colbert_tokenizer = AutoTokenizer.from_pretrained("colbert-ir/colbertv2.0")

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º ColBERT –≤ —Ä–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏ –∏ –Ω–∞ CPU
    colbert_embedding_model.eval()
    colbert_embedding_model = colbert_embedding_model.to('cpu')

    for idx, row in test_data.iterrows():
        query_text = row['question']
        true_context = row['context']


        # BM25 –≤–µ–∫—Ç–æ—Ä
        sparse_vector = list(bm25_embedding_model.query_embed(query_text))
        sparse_embedding = sparse_vector[0] if sparse_vector else None

        # Dense –≤–µ–∫—Ç–æ—Ä (MiniLM)
        dense_embedding = dense_embedding_model.encode(query_text)
        dense_embedding = dense_embedding.tolist()

        # ColBERT –≤–µ–∫—Ç–æ—Ä
        inputs = colbert_tokenizer(
            query_text,
            return_tensors="pt",
            padding=True,
            truncation=True,
            max_length=512
        )

        with torch.no_grad():
            outputs = colbert_embedding_model(**inputs)
            colbert_embedding = outputs.last_hidden_state.mean(dim=1).squeeze(0)
            if len(colbert_embedding.shape) > 1:
                colbert_embedding = colbert_embedding.mean(dim=0)
            if colbert_embedding.shape[0] != 128:
                colbert_embedding = torch.nn.functional.interpolate(
                    colbert_embedding.unsqueeze(0).unsqueeze(0),
                    size=128,
                    mode='linear'
                ).squeeze()
            colbert_embedding = colbert_embedding.cpu().numpy().tolist()

        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
        start_time = time.time()

        # –°–æ–∑–¥–∞–µ–º prefetch –∑–∞–ø—Ä–æ—Å—ã
        prefetch = [
            models.Prefetch(
                query=dense_embedding,
                using="dense",
                limit=20,
            ),
            models.Prefetch(
                query=models.SparseVector(
                    indices=sparse_embedding.indices.tolist() if sparse_embedding else [],
                    values=sparse_embedding.values.tolist() if sparse_embedding else []
                ),
                using="bm25",
                limit=20,
            ),
        ]

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        search_results = client.query_points(
            collection_name,
            prefetch=prefetch,
            query=colbert_embedding,
            using="colbertv2.0",
            with_payload=True,
            limit=max_top_k,
        )

        end_time = time.time()
        query_time = end_time - start_time
        results["speed"]["query_times"].append(query_time)


        found_contexts = []
        for point in search_results.points:
            context = point.payload.get('context', '')
            score = point.score  # –û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
            found_contexts.append((context, score))


        for k in top_k_values:
            results["accuracy"]["before_rerank"][k]["total"] += 1
            if true_context in found_contexts[0][:k]:
                results["accuracy"]["before_rerank"][k]["correct"] += 1

        # –†–µ—Ä–µ–π–∫–∏–Ω–≥ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if reranker:
            found_contexts_r = reranker(query_text, found_contexts)

    # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ —Ä–µ—Ä–µ–π–∫–∏–Ω–≥–∞
            for k in top_k_values:
                results["accuracy"]["after_rerank"][k]["total"] += 1
                if true_context in found_contexts_r[:k]:
                    results["accuracy"]["after_rerank"][k]["correct"] += 1


        progress_bar.update(1)

    progress_bar.close()

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏
    query_times = results["speed"]["query_times"]
    if query_times:
        results["speed"]["avg_time"] = sum(query_times) / len(query_times)
        results["speed"]["median_time"] = sorted(query_times)[len(query_times) // 2]
        results["speed"]["max_time"] = max(query_times)
        results["speed"]["min_time"] = min(query_times)
    del results["speed"]["query_times"]

    # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
    for stage in ["before_rerank", "after_rerank"]:
        for k in top_k_values:
            correct = results["accuracy"][stage][k]["correct"]
            total = results["accuracy"][stage][k]["total"]
            accuracy = correct / total if total > 0 else 0
            results["accuracy"][stage][k]["accuracy"] = accuracy
            logger.info(f"Hybrid Search {stage.replace('_', ' ')} (top-{k}): {accuracy:.4f} ({correct}/{total})")

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏
    logger.info(f"Hybrid Search –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {results['speed']['avg_time'] * 1000:.2f} –º—Å")
    logger.info(f"Hybrid Search –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {results['speed']['median_time'] * 1000:.2f} –º—Å")
    logger.info(f"Hybrid Search –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {results['speed']['max_time'] * 1000:.2f} –º—Å")
    logger.info(f"Hybrid Search –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {results['speed']['min_time'] * 1000:.2f} –º—Å")

    print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Hybrid Search –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}'")

    return results

def simple_reranker(query, candidates):

    texts = [(query, context) for context, _ in candidates]
    scores = reranker_model.predict(texts)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∏–º
    reranked_results = sorted(zip(candidates, scores), key=lambda x: x[1], reverse=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –≤ –Ω–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ
    return [context for (context, _), _ in reranked_results]


def print_comparison(results_without_rerank, results_with_rerank, top_k_values=[1, 3]):
    print("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Hybrid Search —Å —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–æ–º –∏ –±–µ–∑ –Ω–µ–≥–æ:\n")

    print("‚è≥ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:")
    print(f"  - –ë–µ–∑ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞: {results_without_rerank['speed']['avg_time'] * 1000:.2f} –º—Å")
    print(f"  - –° —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–æ–º: {results_with_rerank['speed']['avg_time'] * 1000:.2f} –º—Å")

    print("\nüéØ –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ (Accuracy):")
    for k in top_k_values:
        acc_before = results_without_rerank["accuracy"]["before_rerank"][k]["accuracy"]
        acc_after = results_with_rerank["accuracy"]["after_rerank"][k]["accuracy"]

        print(f"  - Top-{k}:")
        print(f"    - –ë–µ–∑ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞: {acc_before:.4f}")
        print(f"    - –° —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–æ–º: {acc_after:.4f}")


def visualize_results_rerank(results_without_rerank, results_with_rerank, top_k_values=[1, 3],
                             title_prefix="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞", save_dir=f"{GRAPHS_DIR}/graphs"):

    print(f"\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞...")
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞")

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    Path(save_dir).mkdir(exist_ok=True, parents=True)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    timestr = time.strftime("%Y%m%d_%H%M%S")  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã

    # --- 1Ô∏è‚É£ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ---
    plt.figure(figsize=(10, 5))

    speeds = [
        results_without_rerank['speed']['avg_time'] * 1000,  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        results_with_rerank['speed']['avg_time'] * 1000
    ]

    # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏
    plt.bar(["–ë–µ–∑ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞", "–° —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–æ–º"], speeds, color=['#1f77b4', '#2ca02c'])  # –°–∏–Ω–∏–µ –∏ –∑–µ–ª—ë–Ω—ã–µ —Ü–≤–µ—Ç–∞
    plt.ylabel("–í—Ä–µ–º—è (–º—Å)")
    plt.title(f"{title_prefix}: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")
    plt.grid(axis='y', linestyle='--', alpha=0.7)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ (–¥–æ plt.show())
    speed_save_path = f"{save_dir}/speed_comparison_{timestr}_hybrid.png"
    plt.savefig(speed_save_path, dpi=300, bbox_inches='tight')
    logger.info(f"–ì—Ä–∞—Ñ–∏–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {speed_save_path}")
    print(f"–ì—Ä–∞—Ñ–∏–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {speed_save_path}")

    # --- 2Ô∏è‚É£ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ ---
    plt.figure(figsize=(10, 5))

    acc_before = [results_without_rerank["accuracy"]["before_rerank"][k]["accuracy"] for k in top_k_values]
    acc_after = [results_with_rerank["accuracy"]["after_rerank"][k]["accuracy"] for k in top_k_values]

    x = np.arange(len(top_k_values))  # –ø–æ–∑–∏—Ü–∏–∏ –ø–æ X
    width = 0.3  # —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤

    # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏
    plt.bar(x - width / 2, acc_before, width, label="–ë–µ–∑ —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞", color='#1f77b4')  # –°–∏–Ω–∏–π —Ü–≤–µ—Ç
    plt.bar(x + width / 2, acc_after, width, label="–° —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–æ–º", color='#ff7f0e')  # –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç

    plt.xticks(ticks=x, labels=[f"Top-{k}" for k in top_k_values])  # –ø–æ–¥–ø–∏—Å–∏ –æ—Å–∏ X
    plt.ylabel("–¢–æ—á–Ω–æ—Å—Ç—å (Accuracy)")
    plt.title(f"{title_prefix}: –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞")
    plt.legend()
    plt.grid(axis='y', linestyle='--', alpha=0.7)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ (–¥–æ plt.show())
    accuracy_save_path = f"{save_dir}/accuracy_comparison_{timestr}_hybrid.png"
    plt.savefig(accuracy_save_path, dpi=300, bbox_inches='tight')
    logger.info(f"–ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {accuracy_save_path}")
    print(f"–ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {accuracy_save_path}")

if __name__ == "__main__":

    args = parse_args()
    args.limit = 1000

    data_for_db, data_df = read_data(limit=args.limit)
    client = QdrantClient(host=args.qdrant_host, port=args.qdrant_port)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    upload_hybrid_data(
        client=client,
        collection_name="hybrid_collection",
        data=data_for_db
    )

    all_models = args.model_names
    results_without_rerank = benchmark_hybrid_rerank(
        client=client,
        collection_name="hybrid_collection",
        test_data=data_df,
        model=all_models[0],
        search_params={"exact": False, "hnsw_ef": 128},
        top_k_values=[1, 3, 5],
        bm25_weight=0.3,
        dense_weight=0.4,
        colbert_weight=0.3,
        reranker=None
    )


    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
    reranker_model = CrossEncoder("cross-encoder/ms-marco-MiniLM-L-6-v2")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫ —Å —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–æ–º
    results_with_rerank = benchmark_hybrid_rerank(
        client=client,
        collection_name="hybrid_collection",
        test_data=data_df,
        model=None,
        reranker=simple_reranker  # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞
    )


    print_comparison(results_without_rerank, results_with_rerank)
    visualize_results_rerank(results_without_rerank, results_with_rerank)
