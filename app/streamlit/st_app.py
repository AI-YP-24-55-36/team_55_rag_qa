import streamlit as st
from validate_df import validate_csv
from eda import plot_length, length, plot_top_words, plot_wordcloud, prep, plot_tsne, plot_bench
from project_logger import log_and_display
import requests
import time

st.set_page_config(
    page_title="RAG",
    page_icon="üí¨",
    layout="centered",
    initial_sidebar_state="expanded",
)

API_URL = "http://127.0.0.1:8000/api/v1/models"


def clear_other_checkboxes(checked_key):
    for key in st.session_state.keys():
        if key != checked_key and st.session_state[key]:
            st.session_state[key] = False


def text_form(key):
    if "textarea" not in st.session_state:
        st.session_state.textarea = ""
    st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏",
                 height=200,
                 value="",
                 placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç",
                 key=key)
def main():
    # –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ RAG")
    st.markdown("""
    ### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    - –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
    """)

    st.sidebar.title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

    st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    st.markdown("""
       **–§–æ—Ä–º–∞—Ç –¥–∞—Ç–∞—Å–µ—Ç–∞** - 3 –∫–æ–ª–æ–Ω–∫–∏ —Å —Ç–µ–∫—Å—Ç–∞–º–∏  
       `–∫–æ–Ω—Ç–µ–∫—Å—Ç(context)`, `–≤–æ–ø—Ä–æ—Å(question)`, `–æ—Ç–≤–µ—Ç(answer)`
        """)
    st.markdown("—Å—Å—ã–ª–∫–∞ –Ω–∞ [–ø—Ä–∏–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞](https://huggingface.co/datasets/neural-bridge/rag-dataset-12000)")
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ 200 –ú–±", type="csv")

    if uploaded_file is not None:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        valid_df = validate_csv(uploaded_file)
        # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        if valid_df is not None:
            log_and_display("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω!", level="success", display_func=st.success)
            data = valid_df
            st.write("–ü—Ä–µ–≤—å—é - –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:")
            # –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –±—ç–∫–∞
            data = data.rename(columns={
                data.columns[0]: 'context',
                data.columns[1]: 'question',
                data.columns[2]: 'answer'
            })
            st.dataframe(data.head(5))

        if valid_df is not None:
            if st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö"):
                st.success(f"–í—Å–µ–≥–æ {len(data)} —Å—Ç—Ä–æ–∫")
                st.success(f"–í—Å–µ–≥–æ {len(data.columns)} —Å—Ç–æ–ª–±—Ü–∞")

            if st.sidebar.checkbox("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã"):
                columns = data.columns
                if data.duplicated().values.any():
                    st.warning("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã")
                elif data.duplicated(subset=columns[0]).values.any():
                    st.warning(f"–í –¥–∞—Ç–∞—Å–µ—Ç–µ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∫–æ–ª–æ–Ω–∫–µ {columns[0]}")
                elif data.duplicated(subset=columns[1]).values.any():
                    st.warning(f"–í –¥–∞—Ç–∞—Å–µ—Ç–µ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∫–æ–ª–æ–Ω–∫–µ {columns[1]}")
                elif data.duplicated(subset=columns[2]).values.any():
                    st.warning(f"–í –¥–∞—Ç–∞—Å–µ—Ç–µ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∫–æ–ª–æ–Ω–∫–µ –≤ –∫–æ–ª–æ–Ω–∫–µ {columns[2]}")
                else:
                    st.success("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")

            if st.sidebar.checkbox("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö"):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                if data.isnull().values.any():
                    st.warning("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –µ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    missing_rows = data[data.isnull().any(axis=1)].index.tolist()
                    miss = data[data.isnull().any(axis=1)]
                    # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    st.success("–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:")
                    for row in missing_rows:
                        st.write(f"–°—Ç—Ä–æ–∫–∞ {row}")
                    if st.sidebar.button("—Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏"):
                        if missing_rows:
                            st.warning("–°—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:")
                            st.write(miss.head(10))
                        else:
                            st.write("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.")
                else:
                    st.success("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.")

            st.sidebar.title("–ì—Ä–∞—Ñ–∏–∫–∏")
            if st.sidebar.checkbox("–î–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤", key="graph1", on_change=clear_other_checkboxes,
                                   args=("graph1",)):
                new_data = length(data)
                col_len = new_data.columns[-3:].to_list()
                fig = plot_length(new_data, col_len)
                st.plotly_chart(fig, use_container_width=True)
                log_and_display("–≥—Ä–∞—Ñ–∏–∫ —Å –¥–ª–∏–Ω–∞–º–∏ —Å–ª–æ–≤ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ", level="info")
            if st.sidebar.checkbox("–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å —Å–ª–æ–≤", key="graph2", on_change=clear_other_checkboxes,
                                   args=("graph2",)):
                cols = data.columns
                fig, ax = plot_top_words(data[cols[0]])
                log_and_display("–≥—Ä–∞—Ñ–∏–∫ —Å —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å—é —Å–ª–æ–≤ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ", level="info")
                st.pyplot(fig)

            if st.sidebar.checkbox("–û–±–ª–∞–∫–æ —Å–ª–æ–≤", key="graph3", on_change=clear_other_checkboxes, args=("graph3",)):
                cols = data.columns
                fig, ax = plot_wordcloud(data[cols[0]])
                log_and_display("–æ–±–ª–∞–∫–æ —Å–ª–æ–≤ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ", level="info")
                st.pyplot(fig)


            if st.sidebar.checkbox("t-SNE –¥–ª—è —Ç–æ–ø-200 —Å–ª–æ–≤", key="graph4", on_change=clear_other_checkboxes,
                                   args=("graph4",),
                                   help="–ï—Å–ª–∏ –∫–æ—Ä–ø—É—Å —Å–ª–æ–≤ –±–æ–ª—å—à–æ–π, —Ç–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"):
                cols = data.columns
                fig, ax = plot_tsne(data[cols[0]])
                log_and_display("t-SNE –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ", level="info")
                st.pyplot(fig)

            st.sidebar.title("–ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥")
            st.sidebar.markdown("""
                                - —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤
                                - –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                                - –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                                """
                                )

            if st.sidebar.button("–û—á–∏—Å—Ç–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"):
                columns = data.columns
                if data.duplicated().values.any():
                    data.drop_duplicates(keep='first', inplace=True)
                    log_and_display(f"–°—Ç—Ä–æ–∫–∏ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ —É–¥–∞–ª–µ–Ω—ã. –°—Ç–∞–ª–æ –≤—Å–µ–≥–æ {len(data)} —Å—Ç—Ä–æ–∫", level="success",
                                    display_func=st.success)
                else:
                    st.warning("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")

                if data.isnull().values.any():
                    data = data.dropna()
                    log_and_display(f"–°—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω—ã. –°—Ç–∞–ª–æ –≤—Å–µ–≥–æ {len(data)} —Å—Ç—Ä–æ–∫", level="success",
                                    display_func=st.success)
                else:
                    st.warning("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
                data["context"] = data[columns[0]].apply(lambda x: prep(x))
                data["question"] = data[columns[1]].apply(lambda x: prep(x))
                data["answer"] = data[columns[2]].apply(lambda x: prep(x))

                log_and_display(
                    f"–¢–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω –æ—Ç —Å—Ç–æ–ø-—Å–ª–æ–≤, –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ —è–≤–ª—è—é—â–∏—Ö—Å—è –±—É–∫–≤–∞–º–∏ –∏ —Ü–∏—Ñ—Ä–∞–º–∏", level="success",
                    display_func=st.success)
                st.dataframe(data.head(10))
                payload = {}
                payloads = data.to_dict("records")
                data_name = uploaded_file.name
                payload["datasets"] = {data_name: payloads}
                response = requests.post(f"{API_URL}/load_dataset", json=payload)
                mess = response.json()[0]["message"]
                if response.status_code == 201:
                    log_and_display(f"{mess}", level="success", display_func=st.success)
                else:
                    log_and_display(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ API: {response.status_code}", level="error",
                                    display_func=st.error)

            if st.sidebar.title("–ú–æ–¥–µ–ª—å"):
                if st.sidebar.checkbox("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å", key="model", on_change=clear_other_checkboxes, args=("model",)):
                    st.sidebar.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

                    def on_slider_change_max_df():
                        value = st.session_state.slider_value_max_df
                        return value

                    st.sidebar.slider(
                        "max_df",
                        min_value=0.0,
                        max_value=1.0,
                        value=0.85,
                        step=0.1,
                        key="slider_value_max_df",
                        on_change=on_slider_change_max_df,
                    )

                    def on_slider_change_min_df():
                        value = st.session_state.slider_value_min_df
                        return value

                    st.sidebar.slider(
                        "min_df",
                        min_value=1,
                        max_value=10,
                        value=3,
                        step=1,
                        key="slider_value_min_df",
                        on_change=on_slider_change_min_df,
                    )

                    def on_slider_change_max_features():
                        value = st.session_state.max_features
                        return value

                    st.sidebar.slider(
                        "max_features",
                        min_value=20000,
                        max_value=100000,
                        value=50000,
                        step=1000,
                        key="max_features",
                        on_change=on_slider_change_max_features,
                    )

                    def on_sublinear_tf():
                        value = st.session_state.sublinear_tf
                        return value

                    st.sidebar.radio(
                        "sublinear_tf",
                        [True, False],
                        index=0,
                        key="sublinear_tf",
                        on_change=on_sublinear_tf,
                    )

                    def on_ngram():
                        value = st.session_state.ngram_range
                        return value

                    st.sidebar.radio(
                        "ngram_range",
                        [(1, 1), (1, 2), (1, 3)],
                        index=1,
                        key="ngram_range",
                        on_change=on_ngram,
                    )

                    hyperparameters = {}
                    hyperparameters["ngram_range"] = on_ngram()
                    hyperparameters["max_df"] = on_slider_change_max_df()
                    hyperparameters["min_df"] = on_slider_change_min_df()
                    hyperparameters["max_features"] = on_slider_change_max_features()
                    hyperparameters["sublinear_tf"] = on_sublinear_tf()
                    log_and_display(f"–≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ {hyperparameters}", level="info")
                    model_id = st.sidebar.text_input("model_id", max_chars=20)

                    if st.sidebar.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
                        fit_p = {}
                        fit_save = []
                        fit_p["hyperparameters"] = hyperparameters
                        fit_p["model_id"] = model_id
                        fit_p["ml_model_type"] = "tf-idf"
                        fit_p["dataset_nm"] = uploaded_file.name
                        st.warning('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –º–æ–¥–µ–ª—å, –∂–¥–µ–º –æ—Ç–≤–µ—Ç...')
                        fit_save.append(fit_p)
                        response = requests.post(f"{API_URL}/fit_save", json=fit_save)
                        if isinstance(response.json(), dict):
                            log_and_display(f"{response.json()}", level="warning", display_func=st.warning)
                        else:
                            mess = response.json()[0]["message"]
                            if response.status_code == 201:
                                log_and_display(f"{mess}", level="success", display_func=st.success)
                            else:
                                log_and_display(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ API: {response.status_code}", level="error", display_func=st.error)


                    st.sidebar.subheader("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
                    model_id_load = st.sidebar.text_input("model_id_load", max_chars=20)
                    model_load = {"model_id":model_id_load}
                    if st.sidebar.button("–ó–∞–≥—Ä—É–∑–∫–∞"):
                        response = requests.post(f"{API_URL}/load_model", json=model_load)
                        if response.status_code == 200:
                            mess = response.json()[0]["message"]
                            log_and_display(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {mess}", level="success",
                                            display_func=st.success)
                        else:
                            log_and_display(f"–ú–æ–¥–µ–ª–∏ —Å —Ç–∞–∫–∏–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {response.status_code}", level="error",
                                            display_func=st.error)

                    if st.sidebar.button("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"):
                        response = requests.get(f"{API_URL}/list_models")
                        if response.status_code == 200:
                            if  response.json()[0]["models"] != []:
                                for models in response.json():
                                    for el in models["models"]:
                                        model = el["model_id"]
                                        type = el["type"]
                                        hparam = el["hyperparameters"]
                                        if response.status_code == 200:
                                            log_and_display(f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–æ–¥–µ–ª–∏: {model}, –¢–∏–ø –º–æ–¥–µ–ª–∏: {type}, –ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã:{hparam}", level="success",
                                                            display_func=st.success)
                                        else:
                                            log_and_display(f"–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {response.status_code}", level="error",
                                                            display_func=st.error)
                            else:
                                log_and_display(f"–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π", level="error",
                                                display_func=st.error)
                    if st.sidebar.button("–°–ø–∏—Å–æ–∫ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤"):
                        response = requests.get(f"{API_URL}/get_datasets")
                        if response.status_code == 200:
                            df_list = response.json()["datasets_nm"]
                            log_and_display(f"–°–ø–∏—Å–æ–∫ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {df_list}", level="success",
                                        display_func=st.success)



                    if st.sidebar.button("–ë–µ–Ω—á–º–∞—Ä–∫"):
                        # –Ω–∞–¥–æ –≤—ã–∑–≤–∞—Ç—å find_context 50 —Ä–∞–∑ –Ω–∞ 50 —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Å—ç–º–ø–ª–∞—Ö –∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ, –≤—ã–≤–µ—Å—Ç–∏ min, max, mean
                        samples = data["question"].sample(100, random_state=42)
                        times = []
                        for el in samples:
                            start = time.time()
                            context = {"model_id": model_id_load, "question": el}
                            response = requests.post(f"{API_URL}/find_context", json=context)
                            if response.status_code == 200:
                                log_and_display("–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ", level="success")
                            else:
                                log_and_display(f"–ù–µ—Ç –º–æ–¥–µ–ª–∏ —Å —Ç–∞–∫–∏–º id: {response.status_code}", level="error",
                                                display_func=st.error)
                            end = time.time()
                            res = end - start
                            times.append(res)
                        mean = sum(times)/len(times)
                        fig, ax = plot_bench(times)
                        st.pyplot(fig)
                        st.success(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {mean} —Å–µ–∫—É–Ω–¥—ã")


                    if st.sidebar.button("–¢–æ—á–Ω–æ—Å—Ç—å"):
                        params = {"model_id" : model_id_load, "threshold":len(data)}
                        response = requests.post(f"{API_URL}/quality_test", json=params)
                        acc = response.json()["accuracy"]*100
                        if response.status_code == 200:
                            log_and_display(f"–¢–æ—á–Ω–æ—Å—Ç—å: {acc} %", level="success",
                                            display_func=st.success)
                        else:
                            log_and_display(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ API: {response.status_code}", level="error",
                                            display_func=st.error)

                    if st.sidebar.button("–í—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π"):
                        response = requests.post(f"{API_URL}/unload_model", json={"message": "—É–¥–∞–ª–µ–Ω–∏–µ"})
                        try:
                            for el in response.json():
                                mess = el["message"]
                                if response.status_code == 200:
                                    log_and_display(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {mess}", level="success",
                                                    display_func=st.success)
                                else:
                                    log_and_display(f"–ú–æ–¥–µ–ª–∏ —Å —Ç–∞–∫–∏–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {response.status_code}", level="error",
                                                    display_func=st.error)
                        except Exception as e:
                            log_and_display(f"–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π", level="error", display_func=st.error)


                if st.sidebar.checkbox("–ò–Ω—Ñ–µ—Ä–µ–Ω—Å", key="infer", on_change=clear_other_checkboxes, args=("infer",)):
                    text_form("textarea")
                    model_id_inf = st.text_input("model_id", max_chars=20)
                    if st.button('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç'):
                        if len(st.session_state.textarea):
                            st.success('–¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –º–æ–¥–µ–ª—å')
                        else:
                            st.warning('–ü–æ–ª–µ –ø—É—Å—Ç–æ–µ')
                    if st.session_state.textarea:
                        st.write(st.session_state.textarea)
                        test = st.session_state.textarea
                        context = {"model_id": model_id_inf, "question": test}

                        response = requests.post(f"{API_URL}/find_context", json=context)
                        if response.status_code == 200:
                            request = response.json()[0]["context"]
                            score = response.json()[0]["score"]
                            id = response.json()[0]["point_id"]
                            log_and_display(f"–û—Ç–≤–µ—Ç: {request}", level="success", display_func=st.success)
                            log_and_display(f"Score: {score}, –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä {id}", level="success", display_func=st.warning)
                            log_and_display("–ü—Ä–µ–¥–∏–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ", level="success")
                        else:
                            log_and_display(f"–ù–µ—Ç –º–æ–¥–µ–ª–∏ —Å —Ç–∞–∫–∏–º id: {response.status_code}", level="error",
                                            display_func=st.error)
                st.sidebar.subheader("–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")

                model_id_remove = st.sidebar.text_input("model_id_remove", max_chars=20)
                if model_id_remove is not None:
                    if st.sidebar.button("–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å"):
                        response = requests.delete(f"{API_URL}/remove/{model_id_remove}")
                        if response.status_code == 200:
                            log_and_display(f"–£–¥–∞–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å {model_id_remove}", level="success", display_func=st.success)
                        else:
                            log_and_display(f"–ú–æ–¥–µ–ª–∏ —Å —Ç–∞–∫–∏–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {response.status_code}", level="error",
                                            display_func=st.error)

                if st.sidebar.button("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏"):
                    response = requests.delete(f"{API_URL}/remove_all")
                    if response.status_code == 200:
                        log_and_display(f"–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –º–æ–¥–µ–ª–∏", level="success", display_func=st.success)
                    else:
                        log_and_display(f"–ù–µ—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code}", level="error",
                                        display_func=st.error)


if __name__ == "__main__":
    main()
