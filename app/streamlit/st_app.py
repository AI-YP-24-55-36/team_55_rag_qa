import streamlit as st
import pandas as pd
from validate_df import validate_csv
import io
import toml
from eda import plot_length, length, plot_top_words, plot_wordcloud, prep, plot_tsne
import logging
from logging.handlers import RotatingFileHandler
import sys
import os



st.set_page_config(
    page_title="RAG",
    page_icon="üí¨",
    layout="centered",
    initial_sidebar_state="expanded",
)

# primary_color = theme_settings.get("primary_color", "#8FAFBE")
# st.markdown(
#     f"""
#     <style>
#     .stApp {{
#         font-family: sans-serif;
#         background-color: {primary_color};
#         color: white;
#     }}
#     </style>
#     """,
#     unsafe_allow_html=True,
# )

file_handler = RotatingFileHandler(
    'logs/app.log',           # –ò–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞
    maxBytes=1024*1024,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    backupCount=5         # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ backup-—Ñ–∞–π–ª–æ–≤
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)
logger = logging.getLogger()
logger.setLevel(logging.INFO)
logger.addHandler(file_handler)


def main():

    # –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ RAG")
    st.markdown("""
    ### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    - –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
    """)

    st.sidebar.title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

    st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    st.markdown("""
       **–§–æ—Ä–º–∞—Ç –¥–∞—Ç–∞—Å–µ—Ç–∞** - 3 –∫–æ–ª–æ–Ω–∫–∏ —Å —Ç–µ–∫—Å—Ç–∞–º–∏  
       `–∫–æ–Ω—Ç–µ–∫—Å—Ç(context)`, `–≤–æ–ø—Ä–æ—Å(question)`, `–æ—Ç–≤–µ—Ç(answer)`
        """)
    st.markdown("—Å—Å—ã–ª–∫–∞ –Ω–∞ [–ø—Ä–∏–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞](https://huggingface.co/datasets/neural-bridge/rag-dataset-12000)")
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ 200 –ú–±", type="csv")

    if uploaded_file is not None:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        valid_df = validate_csv(uploaded_file)
        # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        if valid_df is not None:
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω!")
            data = valid_df
            logging.info("—Ñ–∞–π–ª –¥–∞—Ç–∞—Å–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω")
            st.write("–ü—Ä–µ–≤—å—é - –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:")
            st.dataframe(data.head(5))

        if valid_df is not None:
            if st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö"):
                st.success(f"–í—Å–µ–≥–æ {len(data)} —Å—Ç—Ä–æ–∫")
                st.success(f"–í—Å–µ–≥–æ {len(data.columns)} —Å—Ç–æ–ª–±—Ü–∞")


            if st.sidebar.checkbox("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã"):
                columns = data.columns
                if data.duplicated().values.any():
                    st.warning("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã")
                elif data.duplicated(subset=columns[0]).values.any():
                    st.warning(f"–í –¥–∞—Ç–∞—Å–µ—Ç–µ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∫–æ–ª–æ–Ω–∫–µ {columns[0]}")
                elif data.duplicated(subset=columns[1]).values.any():
                    st.warning(f"–í –¥–∞—Ç–∞—Å–µ—Ç–µ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∫–æ–ª–æ–Ω–∫–µ {columns[1]}")
                elif data.duplicated(subset=columns[2]).values.any():
                    st.warning(f"–í –¥–∞—Ç–∞—Å–µ—Ç–µ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∫–æ–ª–æ–Ω–∫–µ –≤ –∫–æ–ª–æ–Ω–∫–µ {columns[2]}")
                else:
                    st.success("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")

            if st.sidebar.checkbox("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö"):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                if data.isnull().values.any():
                    st.warning("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –µ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    missing_rows = data[data.isnull().any(axis=1)].index.tolist()
                    miss = data[data.isnull().any(axis=1)]
                    # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    st.write("–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:")
                    for row in missing_rows:
                        st.write(f"–°—Ç—Ä–æ–∫–∞ {row}")
                    if st.sidebar.button("—Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏"):
                        if missing_rows:
                            st.warning("–°—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:")
                            st.write(miss)
                        else:
                            st.write("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.")
                else:
                    st.success("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.")

            st.sidebar.title("–ì—Ä–∞—Ñ–∏–∫–∏")

            if uploaded_file is not None:
                if st.sidebar.checkbox("–î–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤"):
                    new_data = length(data)
                    col_len = new_data.columns[-3:].to_list()
                    fig, ax = plot_length(new_data, col_len)
                    logging.info("–≥—Ä–∞—Ñ–∏–∫ —Å –¥–ª–∏–Ω–∞–º–∏ —Å–ª–æ–≤ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    st.pyplot(fig)
            if uploaded_file is not None:
                if st.sidebar.checkbox("–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å —Å–ª–æ–≤"):
                    cols = data.columns
                    fig, ax = plot_top_words(data[cols[0]])
                    logging.info("–≥—Ä–∞—Ñ–∏–∫ —Å —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å—é —Å–ª–æ–≤ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    st.pyplot(fig)

            if uploaded_file is not None:
                if st.sidebar.checkbox("–û–±–ª–∞–∫–æ —Å–ª–æ–≤"):
                    cols = data.columns
                    fig, ax = plot_wordcloud(data[cols[0]])
                    logging.info("–æ–±–ª–∞–∫–æ —Å–ª–æ–≤ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    st.pyplot(fig)

            if uploaded_file is not None:

                if st.sidebar.checkbox("t-SNE –¥–ª—è —Ç–æ–ø-200 —Å–ª–æ–≤", help="–ï—Å–ª–∏ –∫–æ—Ä–ø—É—Å —Å–ª–æ–≤ –±–æ–ª—å—à–æ–π, —Ç–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"):
                    cols = data.columns
                    fig, ax = plot_tsne(data[cols[0]])
                    logging.info("t-SNE –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    st.pyplot(fig)

            st.sidebar.title("–ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥")

            if uploaded_file is not None:
                if st.sidebar.button("–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã"):
                    columns = data.columns
                    if data.duplicated().values.any():
                        data.drop_duplicates(keep = 'first', inplace = True)
                        st.success(f"–°—Ç—Ä–æ–∫–∏ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ —É–¥–∞–ª–µ–Ω—ã. –°—Ç–∞–ª–æ –≤—Å–µ–≥–æ {len(data)} —Å—Ç—Ä–æ–∫")
                    else:
                        st.warning("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")

            if uploaded_file is not None:
                if st.sidebar.button("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏"):
                    if data.isnull().values.any():
                        data = data.dropna()
                        st.success(f"–°—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω—ã. –°—Ç–∞–ª–æ –≤—Å–µ–≥–æ {len(data)} —Å—Ç—Ä–æ–∫")
                    else: st.warning("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")

            if uploaded_file is not None:
                if st.sidebar.button("–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç"):
                    cols = data.columns
                    data["clear_text"] = data[cols[0]].apply(lambda x: prep(x))
                    st.success(f"–¢–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω –æ—Ç —Å—Ç–æ–ø-—Å–ª–æ–≤, –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ —è–≤–ª—è—é—â–∏—Ö—Å—è –±—É–∫–≤–∞–º–∏ –∏ —Ü–∏—Ñ—Ä–∞–º–∏, –ø—Ä–∏–≤–µ–¥–µ–Ω –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, —ç—Ç—É –∫–æ–ª–æ–Ω–∫—É –º–æ–∂–Ω–æ –ø–æ–¥–∞–≤–∞—Ç—å –≤ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                    st.dataframe(data["clear_text"].head(10))


            st.sidebar.title("–ú–æ–¥–µ–ª—å")
            if st.sidebar.checkbox("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å"):

                st.sidebar.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

                def on_slider_change_max_df():
                    st.write(f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ max_df: {st.session_state.slider_value_max_df}")
                    value = st.session_state.slider_value_max_df
                    return value

                st.sidebar.slider(
                    "max_df",
                    min_value=0.0,
                    max_value=1.0,
                    value=0.8,
                    step=0.1,
                    key="slider_value_max_df",
                    on_change=on_slider_change_max_df,
                )

                def on_slider_change_min_df():
                    st.write(f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ min_df: {st.session_state.slider_value_min_df}")
                    value = st.session_state.slider_value_min_df
                    return value

                st.sidebar.slider(
                    "min_df",
                    min_value=0.0,
                    max_value=1.0,
                    value=1.0,
                    step=0.1,
                    key="slider_value_min_df",
                    on_change=on_slider_change_min_df,
                )

                def on_slider_change_max_features():
                    st.write(f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ max_features: {st.session_state.max_features}")
                    value = st.session_state.max_features
                    return value

                st.sidebar.slider(
                    "min_df",
                    min_value=1000,
                    max_value=30000,
                    value=9000,
                    step=500,
                    key="max_features",
                    on_change=on_slider_change_max_features,
                )

                def on_sublinear_tf():
                    st.write(f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sublinear_tf: {st.session_state.sublinear_tf}")
                    value = st.session_state.sublinear_tf
                    return value

                st.sidebar.radio(
                    "sublinear_tf",
                    [True, False],
                    index=0,
                    key="sublinear_tf",
                    on_change=on_sublinear_tf,
                )

                def on_ngram():
                    st.write(f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ngram_range: {st.session_state.ngram_range}")
                    value = st.session_state.ngram_range
                    return value

                st.sidebar.radio(
                    "ngram_range",
                    [(1, 1), (1, 2)],
                    index=0,
                    key="ngram_range",
                    on_change=on_ngram,
                )


                max_df = on_slider_change_max_df()
                min_df = on_slider_change_min_df()
                max_features = on_slider_change_max_features()
                smooth_idf = on_sublinear_tf()
                ngramm = on_ngram()



                st.sidebar.subheader("–í—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫–∏ –±–ª–∏–∑–æ—Å—Ç–∏")
                def on_distance():
                    st.write(f"–ú–µ—Ç—Ä–∏–∫–∞: {st.session_state.distance}")
                    value = st.session_state.distance
                    return value

                st.sidebar.radio(
                    "distance",
                    ["models.Distance.COSINE", "models.Distance.EUCLID"],
                    index=0,
                    key="distance",
                    on_change=on_distance,
                )

                distance = on_distance()

                st.sidebar.subheader("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")

                if st.sidebar.button("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã"):
                        st.success(f"–ú–æ–¥–µ–ª—å")
                else:
                    st.warning("–ú–æ–¥–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")

                if st.sidebar.button("–û–±—É—á–∏—Ç—å"):
                    st.success(f"–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞")
                else:
                    st.warning("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å")

                if st.sidebar.button("–¢–æ—á–Ω–æ—Å—Ç—å"):
                    st.success(f"–¢–æ—á–Ω–æ—Å—Ç—å %")
                else:
                    st.warning("–ù–µ—Ç –º–æ–¥–µ–ª–∏")

                st.sidebar.title("–ò–Ω—Ñ–µ—Ä–µ–Ω—Å")


            def text_form():
                if 'input_text' not in st.session_state:
                    st.session_state.input_text = " "
                input_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏",
                                  height=200,
                                  value=st.session_state.input_text,
                                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç",
                                    key="text_area"
                                          )
                return input_text

            if st.sidebar.checkbox("–ù–∞—á–∞—Ç—å –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –º–æ–¥–µ–ª–∏"):
                input_text = text_form()
                col1, col2, = st.columns(2)

                with col1:
                    if st.button('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç'):
                        st.session_state.input_text = input_text
                        if len(st.session_state.input_text):
                            st.success('–¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –º–æ–¥–µ–ª—å')
                        else:
                            st.warning('–ü–æ–ª–µ –ø—É—Å—Ç–æ–µ')
                    if st.session_state.input_text:
                        st.write(st.session_state.input_text)
                        test = st.session_state.input_text
                        # inference  = model(test)
                with col2:
                    if st.button('–û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É'):
                        st.session_state.input_text = " "

if __name__ == "__main__":
    main()